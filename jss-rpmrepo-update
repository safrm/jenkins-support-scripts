#!/bin/sh
#jenkins support scripts - http://safrm.net/projects/jenkins-support-scripts
#author: Miroslav Safr <miroslav.safr@gmail.com>
#
VERSION=NA                                                                   
VERSION_DATE=NA
usage() {
    echo "`basename $0` ${VERSION} "
    echo "Usage:`basename $0` [OPTIONS]... REPO_DIR"
    echo "Update rpm repos with default deleting policy and resigning"
    echo " PATTERN ............................. name or email of author or part of it "
    echo " options: "
    echo " -rp, --resign-packages .............. check and resign packages"
    echo " -k, --keep <N> ...................... keep N versions of one packages"
    echo " -rr, --recreate-repo ................ recreate repodata insted of update"
    echo " -cl, --changelog-limit <N> .......... limits changelog entries in repo db"
    echo " -v, --verbose ....................... prints more output"
    echo " -h, --help .......................... shows command line help"
    echo " -V, --version  ...................... prints version of scripts"
    echo "Note: exported GPGKEY or first key is used for signing"
}
KEEP_PKGS=2
UPDATE_REPO_FLAG=--update
while [ $# -gt 0 ]; do
  case "$1" in
    -v | --verbose) 
	VERBOSE=--verbose 
	;;
    -V | --version) 
	echo "`basename $0` ${VERSION} ${VERSION_DATE}"; 
	exit 0 
	;;  
    -h | --help) 
	usage; 
	exit 
	;;
	  -cl, --changelog-limit) shift;
	CLL_FLAG="--changelog-limit=$1"
	;;
    -rp | --resign-packages) 
	RESIGN_PACKAGES=1	
	;;
	  -rr | --recreate-repo) 
	UPDATE_REPO_FLAG=	
	;;
    -k | --keep) 
	shift
	KEEP_PKGS=$1 
	;;
	* )      
        if [ -z "$REPO_DIR" ]; then
            REPO_DIR=$1 ;
        else
            echo "Wrong argument '$1' , exiting.."; 
            usage; 
            exit 1;        
        fi 
        ;;
  esac
  shift
done


#check dir
if [ -z "$REPO_DIR" ] || [ ! -w "$REPO_DIR" ]; then
	echo "not existing dir $REPO_DIR or $USER does not have writable permissions, exiting.."
	exit 1
fi

#clean up
OLDRPMS=`repomanage --keep=$KEEP_PKGS --old   $REPO_DIR 2>/dev/null`
if [ ! -z "$OLDRPMS" ]; then
		echo "$OLDRPMS" | xargs rm -rf
fi


#optional resigning
if [ ! -z "$RESIGN_PACKAGES" ]; then
	GPG_NAME=`gpg --list-keys | grep "$GPGKEY" -1 | grep uid | sed "s/uid *//"`
	if [ ! -z "$GPG_NAME" ]; then
		if [ -z "$GPGKEY" ]; then
			GPGKEY=`gpg --list-keys |  grep "pub " | awk -F "[ /]" '{print $5}' | head -1`
			echo "using first GPGKEY: $GPGKEY"
		fi
		GPG_LC=`echo $GPGKEY  | awk '{print tolower($0)}'`

		find $REPO_DIR -type f -name "*.rpm"  | while read ENTRY
		do
		  RES=`rpm -K "$ENTRY"  -v | grep OK | grep $GPG_LC`
		  if [ $? -ne 0 ]; then
		        #echo "signing $ENTRY by KEY:$GPGKEY  NAME:$GPG_NAME"
		        rpm --addsign -D "_signature gpg" -D "_gpg_name $GPG_NAME"  "$ENTRY" $VERBOSE
		  fi
		done
	fi
fi

#generate repo
createrepo $UPDATE_REPO_FLAG $CLL_FLAG $REPO_DIR $VERBOSE
if [ $? -ne 0 ]; then
	echo "createrepo failed."
	exit 1
fi

#sign repo
if [ -z "$GPGKEY" ]; then
  GPGKEY=`gpg --list-keys |  grep "pub " | awk -F "[ /]" '{print $5}' | head -1`
  echo "reposign uses first GPGKEY: $GPGKEY"
fi
gpg -u $GPGKEY --detach-sign --yes --armor  $REPO_DIR/repodata/repomd.xml
if [ $? -ne 0 ]; then
  echo "repo resign failed."
fi

